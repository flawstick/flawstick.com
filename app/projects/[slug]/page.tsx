import "./mdx.css"; // Assuming shared MDX styles or create projects specific ones
import Image from "next/image";
import { ReportView } from "./view"; // Assuming view incrementor is here
import { getSingleView, ProjectMetadata } from "@/lib/project"; // Use project-specific functions/types
import { notFound } from "next/navigation";
import { FaGithub, FaLink, FaEye } from "react-icons/fa"; // Icons
import { formatDate } from "@/lib/utils"; // Date formatting utility

// Define props for the page component
interface ProjectPageProps {
  params: Promise<{ slug: string }>; // Slug parameter from the URL
}

// Ensure only slugs generated by generateStaticParams are allowed
export const dynamicParams = false;

export default async function ProjectPage({ params }: ProjectPageProps) {
  const { slug } = await params;
  let ProjectComponent; // Renamed from BlogComponent
  let frontmatter: Omit<ProjectMetadata, "slug" | "views">; // Type from the imported MDX file

  // --- Load Project MDX Content and Frontmatter ---
  try {
    // Import from the projects content directory
    const projectModule = await import(`@/content/projects/${slug}.mdx`);
    if (
      !projectModule ||
      !projectModule.frontmatter ||
      !projectModule.default
    ) {
      console.error(
        `MDX module, frontmatter, or default component not found for project slug "${slug}"`,
      );
      notFound(); // Show 404 if essential parts are missing
    }
    ProjectComponent = projectModule.default; // The actual MDX content renderer
    frontmatter = projectModule.frontmatter; // Metadata from the file

    // Optional check if the project is published (might be redundant due to generateStaticParams)
    if (!frontmatter.published) {
      console.warn(`Attempted to access unpublished project: ${slug}`);
      notFound();
    }
  } catch (error) {
    console.error(`Error loading project MDX file for slug "${slug}":`, error);
    notFound(); // Show 404 if import fails
  }

  // --- Fetch Initial View Count Server-Side ---
  // Use the getSingleView function, specifying the "projects" collection
  const viewCount = await getSingleView(slug, "projects");

  // --- Format the date ---
  // Use the date from the successfully loaded frontmatter
  const displayDate = frontmatter.date
    ? formatDate(frontmatter.date)
    : "Date unavailable";

  return (
    <>
      {/* --- Fixed Background Images --- */}
      {/* Using the field background for projects */}
      <div className="fixed inset-0 -z-20 h-full w-full">
        <Image
          src="/images/knight-field-blur.png" // Project background image (blurred)
          alt="Background placeholder"
          fill
          priority
          className="object-cover"
        />
      </div>
      <div className="fixed inset-0 -z-10 h-full w-full">
        <Image
          src="/images/knight-field.png" // Project background image
          alt="Knight in poppy field"
          fill
          priority
          className="object-cover opacity-100" // Start visible
        />
        <div className="absolute inset-0 bg-black/60"></div>{" "}
        {/* Dark overlay */}
      </div>
      {/* --- End Fixed Background --- */}

      {/* ReportView - Client component to increment views for the 'projects' collection */}
      <ReportView slug={slug} />

      {/* --- Main Content Area --- */}
      <main className="relative z-10 mx-auto max-w-3xl px-4 py-16 sm:px-6 lg:px-8 text-white mt-20 animate-slide-up-fade">
        {/* Metadata Section */}
        <div className="mb-8">
          <h1 className="text-4xl lg:text-5xl font-extrabold mb-3">
            {frontmatter.title}
          </h1>
          <p className="text-lg text-neutral-300 mb-4">
            {frontmatter.description}
          </p>
          {/* Date, Views, Links Row */}
          <div className="flex flex-wrap items-center text-sm text-neutral-400 gap-x-4 gap-y-2">
            {/* Display Date */}
            {frontmatter.date && (
              <time dateTime={new Date(frontmatter.date).toISOString()}>
                {displayDate}
              </time>
            )}
            {frontmatter.date && (
              <span className="hidden sm:inline">&bull;</span>
            )}{" "}
            {/* Separator */}
            {/* Display View Count */}
            <span className="flex items-center gap-1.5">
              <FaEye aria-hidden="true" />
              {viewCount.toLocaleString()} views
            </span>
            {/* Conditional Links: Repository and URL */}
            {frontmatter.repository && (
              <>
                <span className="hidden sm:inline">&bull;</span>
                <a
                  // Construct GitHub URL assuming format "user/repo"
                  href={`https://github.com/${frontmatter.repository}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center gap-1 hover:text-neutral-200 transition-colors"
                  aria-label="Project Repository on GitHub"
                >
                  <FaGithub aria-hidden="true" />
                  <span>Repository</span>
                </a>
              </>
            )}
            {frontmatter.url && (
              <>
                <span className="hidden sm:inline">&bull;</span>
                <a
                  href={frontmatter.url} // Use the direct URL from frontmatter
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center gap-1 hover:text-neutral-200 transition-colors"
                  aria-label="Live Project Website"
                >
                  <FaLink aria-hidden="true" />
                  <span>Website</span>
                </a>
              </>
            )}
          </div>
        </div>
        <hr className="my-8 border-neutral-700" /> {/* Separator */}
        {/* Render the Project MDX Content */}
        {/* Apply prose styles for basic MDX element styling */}
        <article className="prose prose-invert lg:prose-xl max-w-none prose-img:rounded-md prose-img:shadow-md">
          <ProjectComponent />
        </article>
      </main>
    </>
  );
}
